{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScripttagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }       \n`;\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\n\nconst Scripts = () => {\n  const [createScript] = useMutation(CREATE_SCRIPT_TAG);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(QUERY_SCRIPTTAGS);\n  if (!!loading) return __jsx(\"h1\", null, \"LOADING...\");\n  if (!!error) return __jsx(\"div\", null, error.message);\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Introduction to script tags\"), \"data.scriptTags.edges.map(i => \", __jsx(\"div\", {\n    key: i.node.id\n  }, i.node.id), \");\", __jsx(\"button\", {\n    type: 'primary',\n    onClick: () => {\n      createScript({\n        variables: {\n          src: \"https://a80f8ee2.ngrok.io/public/script.js\",\n          displayScope: \"ALL\"\n        }\n      });\n    }\n  }, \"Add script\"));\n};\n\nexport default Scripts;","map":{"version":3,"sources":["D:/JSprojects/nextShopify/pages/scripts.js"],"names":["gql","useQuery","useMutation","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","Scripts","createScript","loading","error","data","message","i","node","id","variables","src","displayScope"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,qBAApC;AAEA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;;;;CAA9B;AAcA,MAAMI,gBAAgB,GAAGJ,GAAI;;;;;;;;;;;;CAA7B;;AAcA,MAAMK,OAAO,GAAG,MAAM;AAElB,QAAM,CAACC,YAAD,IAAiBJ,WAAW,CAACC,iBAAD,CAAlC;AACA,QAAM;AAACI,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBR,QAAQ,CAACG,gBAAD,CAAvC;AAEA,MAAI,CAAC,CAACG,OAAN,EAAe,OAAO,+BAAP;AACf,MAAI,CAAC,CAACC,KAAN,EAAa,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAGb,SACI,mBACI,gDADJ,qCAGmC;AAAK,IAAA,GAAG,EAAEC,CAAC,CAACC,IAAF,CAAOC;AAAjB,KAAsBF,CAAC,CAACC,IAAF,CAAOC,EAA7B,CAHnC,QAKI;AAAQ,IAAA,IAAI,EAAE,SAAd;AACQ,IAAA,OAAO,EAAE,MAAM;AACXP,MAAAA,YAAY,CAAC;AAACQ,QAAAA,SAAS,EAAE;AAACC,UAAAA,GAAG,EAAE,4CAAN;AAAoDC,UAAAA,YAAY,EAAE;AAAlE;AAAZ,OAAD,CAAZ;AACH;AAHT,kBALJ,CADJ;AAaH,CAtBD;;AAwBA,eAAeX,OAAf","sourcesContent":["import gql from \"graphql-tag\"\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\"\r\n\r\nconst CREATE_SCRIPT_TAG = gql`\r\n    mutation scriptTagCreate($input: ScripttagInput!) {\r\n        scriptTagCreate(input: $input) {\r\n            scriptTag {\r\n                id\r\n            }\r\n            userErrors {\r\n                field\r\n                message\r\n            }\r\n        }\r\n    }       \r\n`;\r\n\r\nconst QUERY_SCRIPTTAGS = gql`\r\n    query {\r\n        scriptTags(first: 5) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    src\r\n                    displayScope\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Scripts = () => {\r\n\r\n    const [createScript] = useMutation(CREATE_SCRIPT_TAG);\r\n    const {loading, error, data} = useQuery(QUERY_SCRIPTTAGS);\r\n\r\n    if (!!loading) return <h1>LOADING...</h1>;\r\n    if (!!error) return <div>{error.message}</div>;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Introduction to script tags</h1>\r\n\r\n            data.scriptTags.edges.map(i => <div key={i.node.id}>{i.node.id}</div>);\r\n\r\n            <button type={'primary'}\r\n                    onClick={() => {\r\n                        createScript({variables: {src: \"https://a80f8ee2.ngrok.io/public/script.js\", displayScope: \"ALL\"}})\r\n                    }\r\n                    }>Add script</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scripts"]},"metadata":{},"sourceType":"module"}