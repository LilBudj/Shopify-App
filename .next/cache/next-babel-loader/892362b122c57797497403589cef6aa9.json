{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n        scriptTags(first: 5) {\\n            edges {\\n                node {\\n                    id\\n                    src\\n                    displayScope\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagCreate($input: ScriptTagInput!) {\\n        scriptTagCreate(input: $input) {\\n            scriptTag {\\n                id\\n            }\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }       \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nvar CREATE_SCRIPT_TAG = gql(_templateObject());\nvar QUERY_SCRIPTTAGS = gql(_templateObject2());\n\nvar Scripts = function Scripts() {\n  var _useMutation = useMutation(CREATE_SCRIPT_TAG),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createScript = _useMutation2[0];\n\n  var _useQuery = useQuery(QUERY_SCRIPTTAGS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (!!loading) return __jsx(\"h1\", null, \"LOADING...\");\n  if (!!error) return __jsx(\"div\", null, error.message);\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Introduction to script tags\"), !!data && data.scriptTags.edges.map(function (i) {\n    return __jsx(\"div\", {\n      key: i.node.id\n    }, i.node.src);\n  }), \";\", __jsx(\"button\", {\n    type: 'primary',\n    onClick: function onClick() {\n      createScript({\n        variables: {\n          input: {\n            src: \"https://a80f8ee2.ngrok.io/public/script.js\",\n            displayScope: \"ALL\"\n          },\n          refetchQueries: [{\n            query: QUERY_SCRIPTTAGS\n          }]\n        }\n      });\n    }\n  }, \"Add script\"));\n};\n\nexport default Scripts;","map":{"version":3,"sources":["D:/JSprojects/nextShopify/pages/scripts.js"],"names":["gql","useQuery","useMutation","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","Scripts","createScript","loading","error","data","message","scriptTags","edges","map","i","node","id","src","variables","input","displayScope","refetchQueries","query"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,qBAApC;AAEA,IAAMC,iBAAiB,GAAGH,GAAH,mBAAvB;AAcA,IAAMI,gBAAgB,GAAGJ,GAAH,oBAAtB;;AAcA,IAAMK,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,qBAEKH,WAAW,CAACC,iBAAD,CAFhB;AAAA;AAAA,MAEXG,YAFW;;AAAA,kBAGaL,QAAQ,CAACG,gBAAD,CAHrB;AAAA,MAGXG,OAHW,aAGXA,OAHW;AAAA,MAGFC,KAHE,aAGFA,KAHE;AAAA,MAGKC,IAHL,aAGKA,IAHL;;AAKlB,MAAI,CAAC,CAACF,OAAN,EAAe,OAAO,+BAAP;AACf,MAAI,CAAC,CAACC,KAAN,EAAa,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAGb,SACI,mBACI,gDADJ,EAGK,CAAC,CAACD,IAAF,IAAUA,IAAI,CAACE,UAAL,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0B,UAAAC,CAAC;AAAA,WAAI;AAAK,MAAA,GAAG,EAAEA,CAAC,CAACC,IAAF,CAAOC;AAAjB,OAAsBF,CAAC,CAACC,IAAF,CAAOE,GAA7B,CAAJ;AAAA,GAA3B,CAHf,OAKI;AAAQ,IAAA,IAAI,EAAE,SAAd;AACQ,IAAA,OAAO,EAAE,mBAAM;AACXX,MAAAA,YAAY,CAAC;AACTY,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAE;AACHF,YAAAA,GAAG,EAAE,4CADF;AACgDG,YAAAA,YAAY,EAAE;AAD9D,WADA;AAIPC,UAAAA,cAAc,EAAE,CAAC;AAACC,YAAAA,KAAK,EAAElB;AAAR,WAAD;AAJT;AADF,OAAD,CAAZ;AAQH;AAVT,kBALJ,CADJ;AAoBH,CA7BD;;AA+BA,eAAeC,OAAf","sourcesContent":["import gql from \"graphql-tag\"\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\"\r\n\r\nconst CREATE_SCRIPT_TAG = gql`\r\n    mutation scriptTagCreate($input: ScriptTagInput!) {\r\n        scriptTagCreate(input: $input) {\r\n            scriptTag {\r\n                id\r\n            }\r\n            userErrors {\r\n                field\r\n                message\r\n            }\r\n        }\r\n    }       \r\n`;\r\n\r\nconst QUERY_SCRIPTTAGS = gql`\r\n    query {\r\n        scriptTags(first: 5) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    src\r\n                    displayScope\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Scripts = () => {\r\n\r\n    const [createScript] = useMutation(CREATE_SCRIPT_TAG);\r\n    const {loading, error, data} = useQuery(QUERY_SCRIPTTAGS);\r\n\r\n    if (!!loading) return <h1>LOADING...</h1>;\r\n    if (!!error) return <div>{error.message}</div>;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Introduction to script tags</h1>\r\n\r\n            {!!data && data.scriptTags.edges.map(i => <div key={i.node.id}>{i.node.src}</div>)};\r\n\r\n            <button type={'primary'}\r\n                    onClick={() => {\r\n                        createScript({\r\n                            variables: {\r\n                                input: {\r\n                                    src: \"https://a80f8ee2.ngrok.io/public/script.js\", displayScope: \"ALL\"\r\n                                },\r\n                                refetchQueries: [{query: QUERY_SCRIPTTAGS}]\r\n                            }\r\n                        })\r\n                    }\r\n                    }>Add script</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scripts;"]},"metadata":{},"sourceType":"module"}