{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n        scriptTags(first: 5) {\\n            edges {\\n                node {\\n                    id\\n                    src\\n                    displayScope\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagDelete($id: ID!) {\\n        scriptTagDelete(id: $id) {\\n            deletedScriptTagId\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation scriptTagCreate($input: ScriptTagInput!) {\\n        scriptTagCreate(input: $input) {\\n            scriptTag {\\n                id\\n            }\\n            userErrors {\\n                field\\n                message\\n            }\\n        }\\n    }       \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { Button, Card, DatePicker, EmptyState, Layout, Page, RadioButton, ResourceList, Stack, TextField } from \"@shopify/polaris\";\nimport { useCallback, useState } from \"react\";\nimport axios from 'axios';\nvar CREATE_SCRIPT_TAG = gql(_templateObject());\nvar DELETE_SCRIPT_TAG = gql(_templateObject2());\nvar QUERY_SCRIPTTAGS = gql(_templateObject3());\n\nvar Scripts = function Scripts() {\n  var _useMutation = useMutation(CREATE_SCRIPT_TAG),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createScript = _useMutation2[0];\n\n  var _useMutation3 = useMutation(DELETE_SCRIPT_TAG),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deleteScript = _useMutation4[0];\n\n  var _useQuery = useQuery(QUERY_SCRIPTTAGS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(false),\n      initBar = _useState[0],\n      setInitBar = _useState[1];\n\n  var _useState2 = useState(''),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState({\n    month: 1,\n    year: 2018\n  }),\n      _useState3$ = _useState3[0],\n      month = _useState3$.month,\n      year = _useState3$.year,\n      setDate = _useState3[1];\n\n  var _useState4 = useState({\n    start: new Date()\n  }),\n      selectedStartDate = _useState4[0],\n      setSelectedStartDate = _useState4[1];\n\n  var _useState5 = useState({\n    end: new Date('Wed Aug 08 2020 00:00:00 GMT-0300 (EST)')\n  }),\n      selectedEndDate = _useState5[0],\n      setSelectedEndDate = _useState5[1];\n\n  var handleMonthChange = useCallback(function (month, year) {\n    return setDate({\n      month: month,\n      year: year\n    });\n  }, []);\n\n  var _useState6 = useState('disabled'),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var _useState7 = useState(false),\n      checked = _useState7[0],\n      setChecked = _useState7[1];\n\n  var handleChange = useCallback(function (_checked, newValue) {\n    return setValue(newValue);\n  }, []);\n\n  var handleSubmit = function handleSubmit() {\n    var res;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            createScript({\n              variables: {\n                input: {\n                  src: \"https://845c943d.ngrok.io/script.js\",\n                  displayScope: \"ALL\"\n                },\n                refetchQueries: [{\n                  query: QUERY_SCRIPTTAGS\n                }]\n              }\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post('https://845c943d.ngrok.io/api/scripts', {\n              name: name,\n              startDate: selectedStartDate,\n              endDate: selectedEndDate\n            }));\n\n          case 3:\n            res = _context.sent;\n            console.log(res);\n            setInitBar(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  if (!!loading) return __jsx(\"h1\", null, \"LOADING...\");\n  if (!!error) return __jsx(\"div\", null, error.message);\n  return __jsx(Page, null, !initBar && __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"Timebar\"\n  })), !data.scriptTags.edges.length && __jsx(Layout.Section, null, __jsx(EmptyState, {\n    heading: \"Time Banner\",\n    image: 'https://sct.spur-i-t.com/img/icons/empty-state.svg'\n  }, __jsx(Button, {\n    primary: true,\n    size: \"slim\",\n    type: \"submit\",\n    onClick: function onClick() {\n      setInitBar(true);\n    }\n  }, \"Create Bar\"))), !!data.scriptTags.edges.length && __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"Delete Timebar\",\n    sectioned: true\n  }, __jsx(Button, {\n    primary: true,\n    size: \"slim\",\n    type: \"submit\",\n    onClick: function onClick() {\n      deleteScript({\n        variables: {\n          id: data.scriptTags.edges[0].node.id,\n          refetchQueries: [{\n            query: QUERY_SCRIPTTAGS\n          }]\n        }\n      });\n    }\n  }, \"Delete Bar\")))), initBar && __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: 'Banner name:',\n    sectioned: true\n  }, __jsx(TextField, {\n    label: 'name',\n    value: name,\n    onChange: function onChange(value) {\n      setName(value);\n    }\n  })), __jsx(Card, {\n    title: 'Start time',\n    sectioned: true\n  }, __jsx(DatePicker, {\n    month: month,\n    year: year,\n    onChange: setSelectedStartDate,\n    onMonthChange: handleMonthChange,\n    selected: selectedStartDate\n  })), __jsx(Card, {\n    title: 'End Time',\n    sectioned: true\n  }, __jsx(DatePicker, {\n    month: month,\n    year: year,\n    onChange: setSelectedEndDate,\n    onMonthChange: handleMonthChange,\n    selected: selectedEndDate,\n    size: 'slim'\n  })), __jsx(Card, {\n    title: 'Timer display',\n    sectioned: true\n  }, __jsx(Stack, {\n    vertical: true\n  }, __jsx(RadioButton, {\n    label: \"Top\",\n    helpText: \"Displays timer at the top of the store.\",\n    checked: value === 'disabled',\n    id: \"disabled\",\n    name: \"top\",\n    onChange: handleChange\n  }), __jsx(RadioButton, {\n    label: \"Bottom\",\n    helpText: \"Displays timer at the bottom of the store.\",\n    id: \"optional\",\n    name: \"bottom\",\n    checked: value === 'optional',\n    onChange: handleChange\n  })), __jsx(Checkbox, {\n    label: \"Display sticky\",\n    checked: checked,\n    onChange: function onChange(newChecked) {\n      setChecked(newCheked);\n    }\n  })), __jsx(Button, {\n    primary: true,\n    size: \"slim\",\n    type: \"submit\",\n    onClick: handleSubmit\n  }, \"Save\"))));\n};\n\nexport default Scripts;","map":{"version":3,"sources":["D:/JSprojects/nextShopify/pages/scripts.js"],"names":["gql","useQuery","useMutation","Button","Card","DatePicker","EmptyState","Layout","Page","RadioButton","ResourceList","Stack","TextField","useCallback","useState","axios","CREATE_SCRIPT_TAG","DELETE_SCRIPT_TAG","QUERY_SCRIPTTAGS","Scripts","createScript","deleteScript","loading","error","data","initBar","setInitBar","name","setName","month","year","setDate","start","Date","selectedStartDate","setSelectedStartDate","end","selectedEndDate","setSelectedEndDate","handleMonthChange","value","setValue","checked","setChecked","handleChange","_checked","newValue","handleSubmit","variables","input","src","displayScope","refetchQueries","query","post","startDate","endDate","res","console","log","message","scriptTags","edges","length","id","node","newChecked","newCheked"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\"\r\nimport {useQuery, useMutation} from \"@apollo/react-hooks\"\r\nimport {\r\n    Button,\r\n    Card,\r\n    DatePicker,\r\n    EmptyState,\r\n    Layout,\r\n    Page,\r\n    RadioButton,\r\n    ResourceList, Stack,\r\n    TextField\r\n} from \"@shopify/polaris\";\r\nimport {useCallback, useState} from \"react\";\r\nimport axios from 'axios'\r\n\r\nconst CREATE_SCRIPT_TAG = gql`\r\n    mutation scriptTagCreate($input: ScriptTagInput!) {\r\n        scriptTagCreate(input: $input) {\r\n            scriptTag {\r\n                id\r\n            }\r\n            userErrors {\r\n                field\r\n                message\r\n            }\r\n        }\r\n    }       \r\n`;\r\n\r\nconst DELETE_SCRIPT_TAG = gql`\r\n    mutation scriptTagDelete($id: ID!) {\r\n        scriptTagDelete(id: $id) {\r\n            deletedScriptTagId\r\n            userErrors {\r\n                field\r\n                message\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst QUERY_SCRIPTTAGS = gql`\r\n    query {\r\n        scriptTags(first: 5) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    src\r\n                    displayScope\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Scripts = () => {\r\n\r\n    const [createScript] = useMutation(CREATE_SCRIPT_TAG);\r\n    const [deleteScript] = useMutation(DELETE_SCRIPT_TAG);\r\n    const {loading, error, data} = useQuery(QUERY_SCRIPTTAGS);\r\n    const [initBar, setInitBar] = useState(false);\r\n    const [name, setName] = useState('');\r\n\r\n    const [{month, year}, setDate] = useState({\r\n        month: 1,\r\n        year: 2018,\r\n    });\r\n    const [selectedStartDate, setSelectedStartDate] = useState({\r\n        start: new Date(),\r\n    });\r\n    const [selectedEndDate, setSelectedEndDate] = useState({\r\n        end: new Date('Wed Aug 08 2020 00:00:00 GMT-0300 (EST)'),\r\n    });\r\n\r\n    const handleMonthChange = useCallback(\r\n        (month, year) => setDate({month, year}),\r\n        [],\r\n    );\r\n\r\n    const [value, setValue] = useState('disabled');\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const handleChange = useCallback(\r\n        (_checked, newValue) => setValue(newValue),\r\n        [],\r\n    );\r\n\r\n    const handleSubmit = async () => {\r\n        createScript({\r\n            variables: {\r\n                input: {\r\n                    src: \"https://845c943d.ngrok.io/script.js\",\r\n                    displayScope: \"ALL\"\r\n                },\r\n                refetchQueries: [{query: QUERY_SCRIPTTAGS}]\r\n            }\r\n        });\r\n        let res = await axios.post('https://845c943d.ngrok.io/api/scripts',\r\n            {\r\n                name: name,\r\n                startDate: selectedStartDate,\r\n                endDate: selectedEndDate\r\n            });\r\n        console.log(res);\r\n        setInitBar(false);\r\n    };\r\n\r\n    if (!!loading) return <h1>LOADING...</h1>;\r\n    if (!!error) return <div>{error.message}</div>;\r\n\r\n    return (\r\n        <Page>\r\n            {!initBar && <Layout>\r\n                <Layout.Section>\r\n                    <Card title={\"Timebar\"}>\r\n\r\n                    </Card>\r\n                </Layout.Section>\r\n                {!(data.scriptTags.edges.length) && <Layout.Section>\r\n                    <EmptyState\r\n                        heading={\"Time Banner\"}\r\n                    image={'https://sct.spur-i-t.com/img/icons/empty-state.svg'}>\r\n                        <Button\r\n                            primary\r\n                            size={\"slim\"}\r\n                            type={\"submit\"}\r\n                            onClick={() => {\r\n                                setInitBar(true)\r\n                            }}\r\n                        >\r\n                            Create Bar\r\n                        </Button>\r\n                    </EmptyState>\r\n                </Layout.Section>}\r\n                {!!(data.scriptTags.edges.length) && <Layout.Section>\r\n                    <Card title={\"Delete Timebar\"} sectioned>\r\n                        <Button\r\n                            primary\r\n                            size={\"slim\"}\r\n                            type={\"submit\"}\r\n                            onClick={() => {\r\n                                deleteScript({\r\n                                    variables: {\r\n                                        id: data.scriptTags.edges[0].node.id,\r\n                                        refetchQueries: [{query: QUERY_SCRIPTTAGS}]\r\n                                    }\r\n                                })\r\n                            }}>\r\n                            Delete Bar\r\n                        </Button>\r\n                    </Card>\r\n                </Layout.Section>}\r\n            </Layout>}\r\n            {initBar && <Layout>\r\n                <Layout.Section>\r\n                    <Card title={'Banner name:'} sectioned>\r\n                        <TextField\r\n                            label={'name'}\r\n                            value={name}\r\n                            onChange={(value) => {setName(value)}}\r\n                        />\r\n                    </Card>\r\n                    <Card title={'Start time'} sectioned>\r\n                        <DatePicker\r\n                            month={month}\r\n                            year={year}\r\n                            onChange={setSelectedStartDate}\r\n                            onMonthChange={handleMonthChange}\r\n                            selected={selectedStartDate}\r\n                        />\r\n                    </Card>\r\n                    <Card title={'End Time'} sectioned>\r\n                        <DatePicker\r\n                            month={month}\r\n                            year={year}\r\n                            onChange={setSelectedEndDate}\r\n                            onMonthChange={handleMonthChange}\r\n                            selected={selectedEndDate}\r\n                            size={'slim'}\r\n                        />\r\n                    </Card>\r\n                    <Card title={'Timer display'} sectioned>\r\n                        <Stack vertical>\r\n                            <RadioButton\r\n                                label=\"Top\"\r\n                                helpText=\"Displays timer at the top of the store.\"\r\n                                checked={value === 'disabled'}\r\n                                id=\"disabled\"\r\n                                name=\"top\"\r\n                                onChange={handleChange}\r\n                            />\r\n                            <RadioButton\r\n                                label=\"Bottom\"\r\n                                helpText=\"Displays timer at the bottom of the store.\"\r\n                                id=\"optional\"\r\n                                name=\"bottom\"\r\n                                checked={value === 'optional'}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Stack>\r\n                        <Checkbox\r\n                            label=\"Display sticky\"\r\n                            checked={checked}\r\n                            onChange={(newChecked) => {setChecked(newCheked)}}\r\n                        />\r\n                    </Card>\r\n                    <Button\r\n                        primary\r\n                        size={\"slim\"}\r\n                        type={\"submit\"}\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Layout.Section>\r\n            </Layout>}\r\n        </Page>\r\n    )\r\n};\r\n\r\nexport default Scripts"]},"metadata":{},"sourceType":"module"}