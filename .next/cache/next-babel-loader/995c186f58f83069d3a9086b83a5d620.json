{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { Button, Card, Checkbox, ColorPicker, DatePicker, EmptyState, Layout, Page, InlineError, RadioButton, ResourceList, Stack, TextField, Popover, RangeSlider } from \"@shopify/polaris\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport Link from 'next/link';\nimport axios from 'axios';\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input: ScriptTagInput!) {\n        scriptTagCreate(input: $input) {\n            scriptTag {\n                id\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }       \n`;\nconst DELETE_SCRIPT_TAG = gql`\n    mutation scriptTagDelete($id: ID!) {\n        scriptTagDelete(id: $id) {\n            deletedScriptTagId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n`;\nconst QUERY_SCRIPTTAGS = gql`\n    query {\n        scriptTags(first: 5) {\n            edges {\n                node {\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\n\nconst Initial = () => {\n  useEffect(() => {\n    const fetchData = async () => {\n      let res = await axios.get('http://shopify-sale-banner.us-west-1.elasticbeanstalk.com/api/scripts');\n      debugger;\n      return res.data;\n    };\n\n    fetchConfig(fetchData());\n  }, []);\n  const {\n    0: config,\n    1: fetchConfig\n  } = useState(false);\n  const [createScript] = useMutation(CREATE_SCRIPT_TAG);\n  const [deleteScript] = useMutation(DELETE_SCRIPT_TAG);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(QUERY_SCRIPTTAGS);\n  const {\n    0: initBar,\n    1: setInitBar\n  } = useState(false);\n  const {\n    0: name,\n    1: setName\n  } = useState('Timer');\n  const {\n    0: {\n      month,\n      year\n    },\n    1: setDate\n  } = useState({\n    month: 4,\n    year: 2020\n  });\n  const {\n    0: {\n      endMonth,\n      endYear\n    },\n    1: setSecondDate\n  } = useState({\n    endMonth: 6,\n    endYear: 2020\n  });\n  const {\n    0: selectedStartDate,\n    1: setSelectedStartDate\n  } = useState({\n    start: new Date()\n  });\n  const {\n    0: selectedEndDate,\n    1: setSelectedEndDate\n  } = useState({\n    end: new Date('Wed Aug 08 2020 00:00:00 GMT-0300 (EST)')\n  });\n  const handleMonthChange = useCallback((month, year) => setDate({\n    month,\n    year\n  }), []);\n  const handleEndMonthChange = useCallback((endMonth, endYear) => setSecondDate({\n    endMonth,\n    endYear\n  }), []);\n  const {\n    0: value,\n    1: setValue\n  } = useState('Top');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const {\n    0: bgColor,\n    1: setBgColor\n  } = useState({\n    hue: 1,\n    saturation: 1,\n    brightness: 1,\n    alpha: 1\n  });\n  const {\n    0: borderColor,\n    1: setBorderColor\n  } = useState({\n    hue: 1,\n    saturation: 1,\n    brightness: 1,\n    alpha: 1\n  });\n  const handleChange = useCallback((_checked, newValue) => setValue(newValue), []);\n  const {\n    0: popoverActive,\n    1: setPopoverActive\n  } = useState(true);\n  const {\n    0: borderPopover,\n    1: setBorderPopover\n  } = useState(true);\n  const togglePopoverActive = useCallback(() => setPopoverActive(popoverActive => !popoverActive), []);\n  const toggleBorderPopover = useCallback(() => setBorderPopover(popoverActive => !popoverActive), []);\n\n  const activator = __jsx(Button, {\n    onClick: togglePopoverActive,\n    disclosure: true\n  }, \"Background color\");\n\n  const borderActivator = __jsx(Button, {\n    onClick: toggleBorderPopover,\n    disclosure: true\n  }, \"Border color\");\n\n  const {\n    0: rangeValue,\n    1: setRangeValue\n  } = useState(0);\n  const handleRangeSliderChange = useCallback(value => setRangeValue(value), []);\n\n  const handleSubmit = async () => {\n    createScript({\n      variables: {\n        input: {\n          src: \"http://shopify-sale-banner.us-west-1.elasticbeanstalk.com/script.js\",\n          displayScope: \"ALL\"\n        },\n        refetchQueries: [{\n          query: QUERY_SCRIPTTAGS\n        }]\n      }\n    });\n    let res = await axios.post('http://shopify-sale-banner.us-west-1.elasticbeanstalk.com/api/scripts', {\n      name,\n      startDate: selectedStartDate,\n      endDate: selectedEndDate,\n      position: value,\n      sticky: checked,\n      backGroundColor: bgColor,\n      borderSize: rangeValue,\n      borderColor\n    });\n    console.log(res);\n  };\n\n  const deleteSubmit = () => {\n    deleteScript({\n      variables: {\n        id: data.scriptTags.edges[0].node.id,\n        refetchQueries: [{\n          query: QUERY_SCRIPTTAGS\n        }]\n      }\n    });\n    axios.delete('http://shopify-sale-banner.us-west-1.elasticbeanstalk.com/api/scripts').then(res => {\n      console.log(res);\n    });\n  };\n\n  if (!!loading) return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: '100%',\n      fontSize: '30px',\n      fontWeight: '700'\n    }\n  }, \"LOADING...\");\n  if (!!error) return __jsx(\"div\", null, error.message);\n  debugger;\n  return __jsx(Page, null, !initBar && __jsx(Layout, null, !data.scriptTags.edges.length && __jsx(Layout.Section, null, __jsx(EmptyState, {\n    heading: \"Sale Banner\",\n    image: 'https://sct.spur-i-t.com/img/icons/empty-state.svg'\n  }, __jsx(Button, {\n    primary: true,\n    size: \"slim\",\n    type: \"submit\",\n    onClick: () => {\n      setInitBar(true);\n    }\n  }, \"Create Banner\"))), !!data.scriptTags.edges.length && __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"Existing Banner:\",\n    sectioned: true\n  }, __jsx(\"p\", null, config.data ? config.data.name : \"\"), __jsx(Button, {\n    primary: true,\n    size: \"slim\",\n    type: \"submit\",\n    onClick: deleteSubmit\n  }, \"Delete Banner\")))), initBar && __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: 'Banner name:',\n    sectioned: true\n  }, __jsx(TextField, {\n    label: 'Name',\n    value: name,\n    onChange: value => {\n      setName(value);\n    },\n    error: !name ? 'Please enter name' : ''\n  })), __jsx(Card, {\n    title: 'Start time',\n    sectioned: true\n  }, __jsx(DatePicker, {\n    month: month,\n    year: year,\n    onChange: setSelectedStartDate,\n    onMonthChange: handleMonthChange,\n    selected: selectedStartDate\n  })), __jsx(Card, {\n    title: 'End Time',\n    sectioned: true\n  }, __jsx(DatePicker, {\n    month: endMonth,\n    year: endYear,\n    onChange: setSelectedEndDate,\n    onMonthChange: handleEndMonthChange,\n    selected: selectedEndDate,\n    size: 'slim'\n  })), __jsx(Card, {\n    title: 'Timer display',\n    sectioned: true\n  }, __jsx(Stack, {\n    vertical: true\n  }, __jsx(RadioButton, {\n    label: \"Top\",\n    helpText: \"Displays timer at the top of the store.\",\n    checked: value === 'Top',\n    id: 'Top',\n    name: \"Top\",\n    onChange: handleChange\n  }), __jsx(RadioButton, {\n    label: \"Bottom\",\n    helpText: \"Displays timer at the bottom of the store.\",\n    id: \"Bottom\",\n    name: \"Bottom\",\n    checked: value === 'Bottom',\n    onChange: handleChange\n  })), __jsx(Checkbox, {\n    label: \"Display sticky\",\n    checked: checked,\n    onChange: newChecked => {\n      setChecked(newChecked);\n    }\n  })), __jsx(Card, {\n    title: 'Timer design',\n    sectioned: true\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      width: '100%'\n    }\n  }, __jsx(\"div\", null, __jsx(\"p\", {\n    style: {\n      marginBottom: '10px'\n    }\n  }, \"Background color:\"), __jsx(Popover, {\n    active: popoverActive,\n    activator: activator,\n    onClose: togglePopoverActive,\n    fluidContent: true,\n    sectioned: true\n  }, __jsx(ColorPicker, {\n    color: bgColor,\n    onChange: setBgColor\n  })), __jsx(\"div\", {\n    style: {\n      width: '100%',\n      height: '40px',\n      borderRadius: '5px',\n      backgroundColor: `hsla(${bgColor.hue}, ${bgColor.saturation * 100}%, ${bgColor.brightness * 100}%, ${bgColor.alpha})`,\n      marginTop: '10px'\n    }\n  })), __jsx(\"div\", null, __jsx(RangeSlider, {\n    label: \"Border size:\",\n    value: rangeValue,\n    onChange: handleRangeSliderChange,\n    min: 0,\n    max: 12,\n    output: true\n  })), __jsx(\"div\", null, __jsx(\"p\", {\n    style: {\n      marginBottom: '10px'\n    }\n  }, \"Border color:\"), __jsx(Popover, {\n    active: borderPopover,\n    activator: borderActivator,\n    onClose: toggleBorderPopover,\n    fluidContent: true,\n    sectioned: true\n  }, __jsx(ColorPicker, {\n    color: borderColor,\n    onChange: setBorderColor\n  })), __jsx(\"div\", {\n    style: {\n      width: '100%',\n      height: '40px',\n      borderRadius: '5px',\n      backgroundColor: `hsla(${borderColor.hue}, ${borderColor.saturation * 100}%, ${borderColor.brightness * 100}%, ${borderColor.alpha})`,\n      marginTop: '10px'\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginTop: '25px'\n    }\n  }, __jsx(Link, {\n    href: '/success'\n  }, __jsx(Button, {\n    primary: true,\n    size: \"large\",\n    type: \"submit\",\n    onClick: handleSubmit,\n    disabled: !name\n  }, \"Save\"))))));\n};\n\nexport default Initial;","map":null,"metadata":{},"sourceType":"module"}